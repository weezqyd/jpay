// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: customers_svc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerServicesClient is the client API for CustomerServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerServicesClient interface {
	GetAllCustomers(ctx context.Context, in *GetCustomersOptions, opts ...grpc.CallOption) (*CustomersResponse, error)
}

type customerServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerServicesClient(cc grpc.ClientConnInterface) CustomerServicesClient {
	return &customerServicesClient{cc}
}

func (c *customerServicesClient) GetAllCustomers(ctx context.Context, in *GetCustomersOptions, opts ...grpc.CallOption) (*CustomersResponse, error) {
	out := new(CustomersResponse)
	err := c.cc.Invoke(ctx, "/pb.CustomerServices/GetAllCustomers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServicesServer is the server API for CustomerServices service.
// All implementations must embed UnimplementedCustomerServicesServer
// for forward compatibility
type CustomerServicesServer interface {
	GetAllCustomers(context.Context, *GetCustomersOptions) (*CustomersResponse, error)
}

// UnimplementedCustomerServicesServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerServicesServer struct {
}

func (UnimplementedCustomerServicesServer) GetAllCustomers(context.Context, *GetCustomersOptions) (*CustomersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCustomers not implemented")
}
func (UnimplementedCustomerServicesServer) mustEmbedUnimplementedCustomerServicesServer() {}

// UnsafeCustomerServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerServicesServer will
// result in compilation errors.
type UnsafeCustomerServicesServer interface {
	mustEmbedUnimplementedCustomerServicesServer()
}

func RegisterCustomerServicesServer(s grpc.ServiceRegistrar, srv CustomerServicesServer) {
	s.RegisterService(&CustomerServices_ServiceDesc, srv)
}

func _CustomerServices_GetAllCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomersOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServicesServer).GetAllCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CustomerServices/GetAllCustomers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServicesServer).GetAllCustomers(ctx, req.(*GetCustomersOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerServices_ServiceDesc is the grpc.ServiceDesc for CustomerServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CustomerServices",
	HandlerType: (*CustomerServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllCustomers",
			Handler:    _CustomerServices_GetAllCustomers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customers_svc.proto",
}
